/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DataselctionModal {
        "sampleData": any;
        "selectedData": any;
    }
    interface LayoutComponent {
        "dataUrl": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * DataSet which needs to be poured in the visualization, can be a url to file
         */
        "selectedDataset": any;
        /**
          * Single data
         */
        "singleData": string;
    }
    interface LeftPanel {
        "selectedData": any;
    }
    interface ParallelCoordinates {
        "completedata": Array<Object>;
        "dataUrl": any;
        "singleData": string;
    }
}
declare global {
    interface HTMLDataselctionModalElement extends Components.DataselctionModal, HTMLStencilElement {
    }
    var HTMLDataselctionModalElement: {
        prototype: HTMLDataselctionModalElement;
        new (): HTMLDataselctionModalElement;
    };
    interface HTMLLayoutComponentElement extends Components.LayoutComponent, HTMLStencilElement {
    }
    var HTMLLayoutComponentElement: {
        prototype: HTMLLayoutComponentElement;
        new (): HTMLLayoutComponentElement;
    };
    interface HTMLLeftPanelElement extends Components.LeftPanel, HTMLStencilElement {
    }
    var HTMLLeftPanelElement: {
        prototype: HTMLLeftPanelElement;
        new (): HTMLLeftPanelElement;
    };
    interface HTMLParallelCoordinatesElement extends Components.ParallelCoordinates, HTMLStencilElement {
    }
    var HTMLParallelCoordinatesElement: {
        prototype: HTMLParallelCoordinatesElement;
        new (): HTMLParallelCoordinatesElement;
    };
    interface HTMLElementTagNameMap {
        "dataselction-modal": HTMLDataselctionModalElement;
        "layout-component": HTMLLayoutComponentElement;
        "left-panel": HTMLLeftPanelElement;
        "parallel-coordinates": HTMLParallelCoordinatesElement;
    }
}
declare namespace LocalJSX {
    interface DataselctionModal {
        "onDataSelected"?: (event: CustomEvent<any>) => void;
        "sampleData"?: any;
        "selectedData"?: any;
    }
    interface LayoutComponent {
        "dataUrl"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * DataSet which needs to be poured in the visualization, can be a url to file
         */
        "selectedDataset"?: any;
        /**
          * Single data
         */
        "singleData"?: string;
    }
    interface LeftPanel {
        "onLoadDataset"?: (event: CustomEvent<any>) => void;
        "selectedData"?: any;
    }
    interface ParallelCoordinates {
        "completedata"?: Array<Object>;
        "dataUrl"?: any;
        "singleData"?: string;
    }
    interface IntrinsicElements {
        "dataselction-modal": DataselctionModal;
        "layout-component": LayoutComponent;
        "left-panel": LeftPanel;
        "parallel-coordinates": ParallelCoordinates;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dataselction-modal": LocalJSX.DataselctionModal & JSXBase.HTMLAttributes<HTMLDataselctionModalElement>;
            "layout-component": LocalJSX.LayoutComponent & JSXBase.HTMLAttributes<HTMLLayoutComponentElement>;
            "left-panel": LocalJSX.LeftPanel & JSXBase.HTMLAttributes<HTMLLeftPanelElement>;
            "parallel-coordinates": LocalJSX.ParallelCoordinates & JSXBase.HTMLAttributes<HTMLParallelCoordinatesElement>;
        }
    }
}
